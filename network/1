peer chaincode invoke -o orderer.sunmi.com:7050 --tls --cafile $ORDERER_CA                      \
 -C businesschain -n Distributor_Shipper_Farmer -c '{"Args":["newFruitTx", "9", "西瓜","温热","12 cny/kg","2000 kg","9"]}'          \
 --peerAddresses peer0.farmer.com:7051 --tlsRootCertFiles $FARMER_TLS_ROOT_CERT_FILE


requiredPeerCount: Minimum number of peers that the endorsing peer must successfully disseminate private data to
before the peer signs the endorsement and returns the proposal response back to the client. When requiredPeerCount is 0,
it means that no distribution is required, but there may be some distribution if maxPeerCount is greater than zero.
A requiredPeerCount of 0 would typically not be recommended, as it could lead to loss of private data.
Typically you would want to require at least some distribution of the private data at endorsement time to ensure
redundancy of the private data on multiple peers in the network.

maxPeerCount: For data redundancy purposes, the number of other peers that the current endorsing peer will attempt to
distribute the data to. If an endorsing peer becomes unavailable between endorsement time and commit time,
other peers that are collection members but who did not yet receive the private data, will be able to pull the
private data from the peers the private data was disseminated to. If this value is set to 0, the private data
is not disseminated at endorsement time, forcing private data pulls on all authorized peers.

if the disseminated number of peers is smaller than requiredPeerCount, then the endorsement will fail and got the error below.
[gossip/service] DistributePrivateData -> ERRO 086 Failed to distributed private collection, txID 50a0524f7c46fa6d6b639f8ebb9d53bede0547a5998b12dfde57e8a9672b0a63 channel businesschain due to Failed disseminating 1 out of 1 private RWSets


Add a new organization and peer to an existing channel.
 1.set up a configtxlator server to interact with the config block of the channel
 2.fetch the config block using peer channel fetch command
 3.translate the retrieved config block from protobuf to json using configtxlator server
 4.modify the json configuration to include the new org's info
 5.encode the json into protobuf using configtxlator
 6.compute the delta of the new config and the original in the channel
 7.decode the delta config update from protobuf to json
 8.wrap that json update in an envelope
 9.encode the resulting json into protobuf again, using configtxlator
10.sign the transaction for a sufficient subset of the channel's membership to satisfy its endorsement policy
11.submit the signed channel update command with peer channel update command
12.fetch the genesis block for the channel with peer channel fetch
13.start the new org's peer(s)
14.join the new org's peer(s) to the channel using the genesis block with peer channel join
15.install the chaincode to the new org's peer(s) as needed
16.upgrade the chaincode to set a new endorsement policy including the new organization



# 为什么要选择该区块链平台？

差异化的一个关键点是Hyperledger是在Linux基金会下建立的，该基金会本身在开放式治理下培育开源项目的历史悠久且非常成功，这些项目可以发展强大的持续社区和蓬勃发展的生态系统。 Hyperledger由多元化技术指导委员会和Hyperledger Fabric项目管理，该项目由来自多个组织的各种维护人员组成。 它拥有一个开发社区，自最早提交以来已经发展到超过35个组织和近200个开发人员。

- 高度模块化和可配置的架构
包括共识协议
可为各种行业用例提供创新，多功能性和优化，包括银行，金融，保险，医疗保健，人力资源，供应链甚至数字音乐交付。

Fabric是第一个支持在通用编程语言（如Java，Go和Node.js）中创建的智能合约的分布式账本平台，而不是受限制的特定于域的语言（DSL）。 这意味着大多数企业已经拥有开发智能合约所需的技能，并且不需要额外的培训来学习新的语言或DSL。

Fabric平台也获得了许可，这意味着，与公共无权网络不同，参与者彼此了解，而不是匿名，因此完全不受信任。 这意味着虽然参与者可能彼此不完全信任（例如，他们可能是同一行业中的竞争者），但网络可以在治理模型下运行，该模型基于参与者之间存在的信任，例如 处理纠纷的法律协议或框架。

该平台最重要的区别之一是它支持可插拔的共识协议，使平台能够更有效地进行定制，以适应特定的用例和信任模型。 例如，当部署在单个企业内或由可信任的权威机构运营时，完全拜占庭容错的共识可能被认为是不必要的，并且对性能和吞吐量造成过度拖累。 在诸如此类的情况下，崩溃容错（CFT）共识协议可能绰绰有余，而在多方分散用例中，可能需要更传统的拜占庭容错（BFT）共识协议。

Fabric可以利用不需要本机加密货币的共识协议来激活昂贵的采矿或推动智能合约执行。 避免加密货币会减少一些重要的风险/攻击向量，并且缺少加密挖掘操作意味着可以使用与任何其他分布式系统大致相同的运营成本来部署平台。

这些差异化设计特性的结合使Fabric成为当今业务处理和事务确认延迟方面性能更好的平台之一，它实现了事务的隐私和机密性以及实现的智能合约（Fabric称之为“链代码”） 他们。

Digital Certificates
Public and Private Keys
Certificate Authorities
Certificate Revocation Lists

